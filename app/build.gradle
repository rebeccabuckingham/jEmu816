import org.apache.tools.ant.taskdefs.condition.Os

plugins {
  // Apply the application plugin to add support for building a CLI application in Java.
  id 'application'
  id 'eclipse'
  id 'idea'
}

repositories {
  // Use Maven Central for resolving dependencies.
  mavenCentral()
}

dependencies {
  // Use JUnit Jupiter for testing.
  testImplementation libs.junit.jupiter

  testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

  // This dependency is used by the application.
  implementation libs.guava

  implementation 'ch.qos.logback:logback-core:1.4.14'
  implementation 'ch.qos.logback:logback-classic:1.4.14'
  implementation 'net.sourceforge.argparse4j:argparse4j:0.9.0'
  implementation 'com.sparkjava:spark-core:2.9.4'

  implementation 'com.fasterxml.jackson.core:jackson-core:2.16.1'
  implementation 'com.fasterxml.jackson.core:jackson-databind:2.16.1'
  implementation 'com.grahamedgecombe.jterminal:jterminal:1.0.1'

	// for the FlatLaf look and feel
  implementation 'com.formdev:flatlaf:3.3'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

task compileJNI(type: Exec) {
    workingDir file("../vera").absolutePath
    commandLine 'make'
}

task copyJNILibrary(type: Copy) {
    from file("../vera/build/libvera.jnilib").absolutePath
    into 'libs'
}

distributions {
    main {
        contents {
            // Include the compiled Java classes
            from { project.tasks.getByName('jar').outputs.files }
            // Include the copied JNI library
            from 'libs'
        }
    }
}

compileJava.dependsOn compileJNI
copyJNILibrary.dependsOn compileJNI
distTar.dependsOn compileJava, copyJNILibrary
distZip.dependsOn compileJava, copyJNILibrary

application {
  // add the library path when using 'gradle run'
  // and a separate one when using 'gradle distZip'
  if (gradle.startParameter.taskNames.contains('run')) {
    applicationDefaultJvmArgs = [
      "-Djava.library.path=" + file("../vera/build").absolutePath,
    ]
  } else {
    applicationDefaultJvmArgs = [
      "-Djava.library.path=.",
    ]
  }

  // on mac, pass in -PuseVera to add the -XstartOnFirstThread option
  // that's needed for SDL.
  if (project.hasProperty('useVera') && Os.isFamily(Os.FAMILY_MAC)) {
    applicationDefaultJvmArgs += "-XstartOnFirstThread"
  }

  mainClass = 'jEmu816.App'
}

tasks.named('test') {
  // Use JUnit Platform for unit tests.
  useJUnitPlatform()
}
